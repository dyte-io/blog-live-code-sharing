{"version":3,"file":"static/js/7181.a9b6d029.chunk.js","mappings":"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","sources":["../node_modules/@dytesdk/ui-kit/dist/esm/dyte-name-tag.entry.js","../node_modules/@dytesdk/ui-kit/dist/esm/index-2b010b0f.js","../node_modules/@dytesdk/ui-kit/dist/esm/string-8aa800b0.js"],"sourcesContent":["import { r as registerInstance, h, H as Host } from './index-60449c9e.js';\nimport { s as shorten, f as formatName } from './string-8aa800b0.js';\nimport { u as useLanguage } from './index-2b010b0f.js';\nimport { d as defaultIconPack } from './default-language-95a0d199.js';\n\nconst dyteNameTagCss = \":host{display:inline-flex;-webkit-user-select:none;-moz-user-select:none;user-select:none;align-items:center;padding-top:var(--dyte-space-1, 4px);padding-bottom:var(--dyte-space-1, 4px);padding-left:var(--dyte-space-1\\\\.5, 6px);padding-right:var(--dyte-space-1\\\\.5, 6px);font-size:14px;border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));font-family:var(--dyte-font-family, sans-serif)}span.name{overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}::slotted(dyte-audio-visualizer[slot='start']){margin-right:var(--dyte-space-1\\\\.5, 6px)}::slotted(dyte-audio-visualizer[slot='end']){margin-left:var(--dyte-space-1\\\\.5, 6px)}:host([size='sm']){font-size:12px;--tw-bg-opacity:0.6}\";\n\nconst DyteNameTag = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.participant = undefined;\n    this.meeting = undefined;\n    this.size = undefined;\n    this.maxLength = 20;\n    this.isScreenShare = false;\n    this.iconPack = defaultIconPack;\n    this.t = useLanguage();\n    this.length = 13;\n  }\n  sizeChanged(size) {\n    this.length = size === 'sm' ? 8 : 13;\n  }\n  formatNameTag(name, isSelf) {\n    return !this.isScreenShare\n      ? isSelf\n        ? `${shorten(name, this.length - 3)} (${this.t('you')})`\n        : shorten(name, this.length)\n      : isSelf\n        ? `${this.t('Screen')} - ${shorten(name, this.length - 3)} (${this.t('you')})`\n        : `${this.t('Screen')} - ${shorten(name, this.length)}`;\n  }\n  render() {\n    var _a, _b, _c;\n    const name = formatName(((_a = this.participant) === null || _a === void 0 ? void 0 : _a.name) || '');\n    const isSelf = ((_b = this.participant) === null || _b === void 0 ? void 0 : _b.id) === ((_c = this.meeting) === null || _c === void 0 ? void 0 : _c.self.id);\n    return (h(Host, { title: name }, h(\"slot\", { name: \"start\" }), h(\"span\", { class: \"name\" }, this.formatNameTag(name, isSelf)), h(\"slot\", { name: \"end\" })));\n  }\n  static get watchers() { return {\n    \"size\": [\"sizeChanged\"]\n  }; }\n};\nDyteNameTag.style = dyteNameTagCss;\n\nexport { DyteNameTag as dyte_name_tag };\n","import { a as defaultLanguage } from './default-language-95a0d199.js';\n\n// Replace with cdn base path in prod\nconst LANG_BASE_URL = 'http://localhost:5000';\nconst getLangData = async (lang) => {\n  if (lang == null || lang === 'en' || lang.trim() === '') {\n    return defaultLanguage;\n  }\n  try {\n    const res = await fetch(`${LANG_BASE_URL}/${lang}.json`);\n    if (!res.ok) {\n      return defaultLanguage;\n    }\n    // merge fetched language with defaultLanguage to avoid empty properties\n    return Object.assign({}, defaultLanguage, await res.json());\n  }\n  catch (_) {\n    return defaultLanguage;\n  }\n};\n/**\n * Creates an i18n instance from a language dictionary/object.\n * @param lang The language dictionary\n * @returns A function which handles i18n\n */\nconst useLanguage = (lang = defaultLanguage) => {\n  return (key) => {\n    var _a;\n    return (_a = lang[key]) !== null && _a !== void 0 ? _a : key;\n  };\n};\n\nexport { getLangData as g, useLanguage as u };\n","/**\n * Shorten a string upto a maximum length of characters and add `...` as suffix if it exceeds the maximum length\n * @param str The The string you want to shorten\n * @param maxLength Maximum length of character\n * @returns Formatted shortedned string\n */\nconst shorten = (str, maxLength = 20) => {\n  if (str == null)\n    return '';\n  if (str.length > maxLength) {\n    return `${str.substring(0, maxLength)}...`;\n  }\n  return str;\n};\n/**\n * Checks if a given string consists of only emojis.\n *\n * However this classifies a string with numbers as emoji as well.\n * Which works in our favour for now in chat as it enlarges messages with just numbers.\n * @param str String on which to perform the check on\n * @returns A Boolean value which indicates if string consists of only emojis\n */\nconst hasOnlyEmojis = (str) => {\n  const num = /^\\d+$/;\n  const re = /^\\p{Emoji}+$/u;\n  return re.test(str) && !num.test(str);\n};\nconst sanitizeLink = (link) => {\n  // TODO: needs more work\n  if (link === null || link === void 0 ? void 0 : link.trim().toLowerCase().startsWith('javascript:')) {\n    return 'https://dyte.io';\n  }\n  return link;\n};\n/**\n * Formats a given name and returns **Participant** for unnamed participants.\n * @param name Name of participant\n * @returns Name to use in the UI\n */\nconst formatName = (name) => {\n  name = name === null || name === void 0 ? void 0 : name.trim();\n  if (name === '')\n    return 'Participant';\n  return name;\n};\nfunction getInitials(name, maxInitials = 2) {\n  // removes any character that is not a letter, number or whitespace\n  const cleanedName = name.replace(/[^\\u00BF-\\u1FFF\\u2C00-\\uD7FF\\w\\s]/g, '');\n  const words = cleanedName.trim().split(/\\s+/).slice(0, maxInitials);\n  return words\n    .map((word) => word.charAt(0))\n    .join('')\n    .toUpperCase();\n}\n\nexport { sanitizeLink as a, formatName as f, getInitials as g, hasOnlyEmojis as h, shorten as s };\n"],"names":["DyteNameTag","hostRef","_classCallCheck","registerInstance","this","participant","undefined","meeting","size","maxLength","isScreenShare","iconPack","defaultIconPack","t","useLanguage","length","_createClass","key","value","name","isSelf","concat","shorten","_a","_b","_c","formatName","id","self","h","Host","title","class","formatNameTag","get","style","getLangData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","lang","res","wrap","_context","prev","next","trim","abrupt","defaultLanguage","fetch","sent","ok","t0","Object","t1","t2","json","t3","assign","call","t4","stop","_x","apply","arguments","str","substring","hasOnlyEmojis","test","sanitizeLink","link","toLowerCase","startsWith","getInitials","maxInitials","replace","split","slice","map","word","charAt","join","toUpperCase"],"sourceRoot":""}