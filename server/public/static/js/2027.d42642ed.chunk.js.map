{"version":3,"file":"static/js/2027.d42642ed.chunk.js","mappings":"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","sources":["../node_modules/@dytesdk/ui-kit/dist/esm/dyte-poll_2.entry.js","../node_modules/@dytesdk/ui-kit/dist/esm/index-2b010b0f.js","../node_modules/@dytesdk/ui-kit/dist/esm/string-8aa800b0.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host } from './index-60449c9e.js';\nimport { d as defaultIconPack } from './default-language-95a0d199.js';\nimport { u as useLanguage } from './index-2b010b0f.js';\nimport { s as shorten, f as formatName, g as getInitials } from './string-8aa800b0.js';\n\nconst dytePollCss = \".scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\\\.5, 6px);width:var(--dyte-space-1\\\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}.ctr{margin-bottom:var(--dyte-space-3, 12px);display:flex;width:83.333333%;flex-direction:column;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.poll-title{margin-top:var(--dyte-space-3, 12px);margin-bottom:var(--dyte-space-3, 12px);margin-right:var(--dyte-space-4, 16px);font-size:12px;font-weight:700}.poll{border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));display:flex;flex-direction:column;padding:var(--dyte-space-3, 12px)}.poll p{margin:var(--dyte-space-0, 0px)}.poll-question{font-size:12px;font-weight:700;overflow-wrap:break-word}.poll-option{display:flex;flex-direction:column;margin-top:var(--dyte-space-2, 8px);border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));padding:var(--dyte-space-2, 8px);word-break:break-word}.poll-option label{display:flex;flex-direction:row}.poll-option-header{display:flex;flex-direction:row;justify-content:space-between}.votes{margin-top:var(--dyte-space-1, 4px);display:flex;flex-direction:row;flex-wrap:wrap}.vote{margin-right:var(--dyte-space-1, 4px);height:var(--dyte-space-8, 32px);width:var(--dyte-space-8, 32px);display:flex;align-items:center;justify-content:center;border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));border-radius:var(--dyte-border-radius-none, 0);-webkit-clip-path:circle();clip-path:circle()}.active{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity))}\";\n\nconst DytePolls = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.onVote = createEvent(this, \"dyteVotePoll\", 7);\n    this.poll = undefined;\n    this.self = undefined;\n    this.permissions = undefined;\n    this.iconPack = defaultIconPack;\n    this.t = useLanguage();\n  }\n  vote(e, index) {\n    if (this.poll.voted.includes(this.self)) {\n      e.preventDefault();\n    }\n    else {\n      this.onVote.emit({ id: this.poll.id, index });\n    }\n  }\n  render() {\n    return (h(Host, null, h(\"div\", { class: \"ctr\" }, h(\"p\", { class: \"poll-title\" }, this.t('Poll by'), \" \", shorten(formatName(this.poll.createdBy), 20)), h(\"div\", { class: \"poll\" }, h(\"p\", { class: \"poll-question\" }, this.poll.question), this.poll.options.map((item, index) => (h(\"div\", { class: {\n        active: item.votes.some((x) => x.id === this.self),\n        'poll-option': true,\n      } }, h(\"div\", { class: \"poll-option-header\" }, h(\"label\", null, h(\"input\", { disabled: !this.permissions.polls.canVote, type: \"checkbox\", checked: item.votes.some((x) => x.id === this.self), onClick: (e) => this.vote(e, index) }), h(\"p\", null, item.text, \" (\", item.count, \")\"))), h(\"div\", { class: \"votes\" }, item.votes.map((vote) => {\n      if (this.poll.anonymous && this.self !== this.poll.createdByUserId)\n        return;\n      return (h(\"dyte-tooltip\", { label: vote.name, iconPack: this.iconPack, t: this.t }, h(\"div\", { class: \"vote\" }, getInitials(vote.name))));\n    })))))))));\n  }\n};\nDytePolls.style = dytePollCss;\n\nconst dytePollFormCss = \".scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\\\.5, 6px);width:var(--dyte-space-1\\\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}.create-poll{margin-top:var(--dyte-space-3, 12px);margin-bottom:var(--dyte-space-3, 12px);display:flex;flex:1 1 0%;flex-direction:column;padding:var(--dyte-space-3, 12px);border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}input{font-family:var(--dyte-font-family, sans-serif)}.create-poll p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px);text-align:center}.create-poll textarea{display:flex;border-radius:var(--dyte-border-radius-sm, 4px);padding:var(--dyte-space-2, 8px);border-width:var(--dyte-border-width-none, 0);border-style:none;font-family:var(--dyte-font-family, sans-serif);font-weight:500;outline:2px solid transparent;outline-offset:2px;margin-top:var(--dyte-space-3, 12px);margin-bottom:var(--dyte-space-3, 12px);resize:vertical;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.create-poll textarea:focus{outline-style:solid;outline-offset:2px;outline-color:rgb(var(--dyte-colors-background-600, 60 60 60))}.option{display:flex;flex-direction:row;align-items:center;margin-bottom:var(--dyte-space-3, 12px);width:100%}.option input{width:100%;border-radius:var(--dyte-border-radius-sm, 4px);padding:var(--dyte-space-2, 8px);border-width:var(--dyte-border-width-none, 0);border-style:none;outline:2px solid transparent;outline-offset:2px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.remove-option{margin-left:var(--dyte-space-2, 8px);width:var(--dyte-space-10, 40px);border-radius:var(--dyte-border-radius-sm, 4px)}.add-option{margin-bottom:var(--dyte-space-3, 12px)}label{margin-bottom:var(--dyte-space-3, 12px)}.error-text{margin-top:var(--dyte-space-3, 12px);text-align:center;font-size:12px;--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}\";\n\nconst DytePoll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.onCreate = createEvent(this, \"dyteCreatePoll\", 7);\n    this.iconPack = defaultIconPack;\n    this.t = useLanguage();\n    this.options = ['', ''];\n    this.anonymous = false;\n    this.hideVotes = true;\n    this.error = undefined;\n  }\n  removeOption(index) {\n    var _a;\n    this.options = this.options.filter((_, ind) => ind !== index);\n    if (((_a = this.error) === null || _a === void 0 ? void 0 : _a.code) === 1)\n      this.error = undefined;\n  }\n  addOption() {\n    this.options = [...this.options, ''];\n  }\n  updateOption(ev, index) {\n    var _a;\n    this.options[index] = ev.target.value;\n    if (((_a = this.error) === null || _a === void 0 ? void 0 : _a.code) === 1)\n      this.error = undefined;\n  }\n  handleSubmit() {\n    const pollObject = {\n      question: this.question.value,\n      options: this.options,\n      anonymous: this.anonymous,\n      hideVotes: this.anonymous ? true : this.hideVotes,\n    };\n    if (!pollObject.question) {\n      this.error = {\n        code: 0,\n        message: this.t('Question is required.'),\n      };\n      return;\n    }\n    if (this.options.filter((op) => op.trim() === '').length > 0) {\n      this.error = {\n        code: 1,\n        message: this.t('Empty options not allowed.'),\n      };\n      return;\n    }\n    this.onCreate.emit(pollObject);\n  }\n  render() {\n    return (h(Host, null, h(\"div\", { class: \"create-poll\" }, h(\"p\", null, this.t('Poll Question')), h(\"textarea\", { onInput: () => {\n        if (this.error && this.error.code === 0)\n          this.error = undefined;\n      }, ref: (e) => (this.question = e), placeholder: this.t('What is your poll for?') }), this.options.map((item, index) => (h(\"div\", { class: \"option\" }, h(\"input\", { placeholder: this.t('Enter an option'), value: item, onInput: (event) => this.updateOption(event, index) }), index > 1 && (h(\"dyte-button\", { kind: \"icon\", class: \"auto remove-option\", variant: \"secondary\", onClick: () => this.removeOption(index), iconPack: this.iconPack, t: this.t }, h(\"dyte-icon\", { icon: this.iconPack.subtract, iconPack: this.iconPack, t: this.t })))))), h(\"dyte-button\", { class: \"add-option\", variant: \"secondary\", onClick: () => this.addOption(), iconPack: this.iconPack, t: this.t }, this.t('Add an option')), h(\"label\", null, h(\"input\", { id: \"anonymous\", type: \"checkbox\", onChange: (e) => (this.anonymous = e.target.checked) }), this.t('Anonymous')), h(\"label\", null, h(\"input\", { id: \"hideVotes\", type: \"checkbox\", disabled: this.anonymous, checked: this.anonymous ? true : this.hideVotes, onChange: (e) => (this.hideVotes = e.target.checked) }), this.t('Hide results before voting')), h(\"dyte-button\", { kind: \"wide\", onClick: () => this.handleSubmit(), iconPack: this.iconPack, t: this.t }, this.t('Create Poll')), this.error && h(\"span\", { class: \"error-text\" }, this.error.message))));\n  }\n};\nDytePoll.style = dytePollFormCss;\n\nexport { DytePolls as dyte_poll, DytePoll as dyte_poll_form };\n","import { a as defaultLanguage } from './default-language-95a0d199.js';\n\n// Replace with cdn base path in prod\nconst LANG_BASE_URL = 'http://localhost:5000';\nconst getLangData = async (lang) => {\n  if (lang == null || lang === 'en' || lang.trim() === '') {\n    return defaultLanguage;\n  }\n  try {\n    const res = await fetch(`${LANG_BASE_URL}/${lang}.json`);\n    if (!res.ok) {\n      return defaultLanguage;\n    }\n    // merge fetched language with defaultLanguage to avoid empty properties\n    return Object.assign({}, defaultLanguage, await res.json());\n  }\n  catch (_) {\n    return defaultLanguage;\n  }\n};\n/**\n * Creates an i18n instance from a language dictionary/object.\n * @param lang The language dictionary\n * @returns A function which handles i18n\n */\nconst useLanguage = (lang = defaultLanguage) => {\n  return (key) => {\n    var _a;\n    return (_a = lang[key]) !== null && _a !== void 0 ? _a : key;\n  };\n};\n\nexport { getLangData as g, useLanguage as u };\n","/**\n * Shorten a string upto a maximum length of characters and add `...` as suffix if it exceeds the maximum length\n * @param str The The string you want to shorten\n * @param maxLength Maximum length of character\n * @returns Formatted shortedned string\n */\nconst shorten = (str, maxLength = 20) => {\n  if (str == null)\n    return '';\n  if (str.length > maxLength) {\n    return `${str.substring(0, maxLength)}...`;\n  }\n  return str;\n};\n/**\n * Checks if a given string consists of only emojis.\n *\n * However this classifies a string with numbers as emoji as well.\n * Which works in our favour for now in chat as it enlarges messages with just numbers.\n * @param str String on which to perform the check on\n * @returns A Boolean value which indicates if string consists of only emojis\n */\nconst hasOnlyEmojis = (str) => {\n  const num = /^\\d+$/;\n  const re = /^\\p{Emoji}+$/u;\n  return re.test(str) && !num.test(str);\n};\nconst sanitizeLink = (link) => {\n  // TODO: needs more work\n  if (link === null || link === void 0 ? void 0 : link.trim().toLowerCase().startsWith('javascript:')) {\n    return 'https://dyte.io';\n  }\n  return link;\n};\n/**\n * Formats a given name and returns **Participant** for unnamed participants.\n * @param name Name of participant\n * @returns Name to use in the UI\n */\nconst formatName = (name) => {\n  name = name === null || name === void 0 ? void 0 : name.trim();\n  if (name === '')\n    return 'Participant';\n  return name;\n};\nfunction getInitials(name, maxInitials = 2) {\n  // removes any character that is not a letter, number or whitespace\n  const cleanedName = name.replace(/[^\\u00BF-\\u1FFF\\u2C00-\\uD7FF\\w\\s]/g, '');\n  const words = cleanedName.trim().split(/\\s+/).slice(0, maxInitials);\n  return words\n    .map((word) => word.charAt(0))\n    .join('')\n    .toUpperCase();\n}\n\nexport { sanitizeLink as a, formatName as f, getInitials as g, hasOnlyEmojis as h, shorten as s };\n"],"names":["DytePolls","hostRef","_classCallCheck","registerInstance","this","onVote","createEvent","poll","undefined","self","permissions","iconPack","defaultIconPack","t","useLanguage","_createClass","key","value","e","index","voted","includes","preventDefault","emit","id","_this","h","Host","class","shorten","formatName","createdBy","question","options","map","item","active","votes","some","x","disabled","polls","canVote","type","checked","onClick","vote","text","count","anonymous","createdByUserId","label","name","getInitials","style","DytePoll","onCreate","hideVotes","error","_a","filter","_","ind","code","concat","_toConsumableArray","ev","target","pollObject","op","trim","length","message","_this2","onInput","ref","placeholder","event","updateOption","kind","variant","removeOption","icon","subtract","addOption","onChange","handleSubmit","getLangData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","lang","res","wrap","_context","prev","next","abrupt","defaultLanguage","fetch","sent","ok","t0","Object","t1","t2","json","t3","assign","call","t4","stop","_x","apply","arguments","str","maxLength","substring","hasOnlyEmojis","test","sanitizeLink","link","toLowerCase","startsWith","maxInitials","replace","split","slice","word","charAt","join","toUpperCase"],"sourceRoot":""}